{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/Selector.svelte",
    "../src/RandomNumberList.svelte",
    "../src/RandomNumber.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { fly } from 'svelte/transition';\nimport Selector from './Selector.svelte'\nimport RandomNumberList from './RandomNumberList.svelte'\nimport STORE, {dispatch, connect, options, changeOS, changeChannel, requestNewNumbersFromAPI, queryString } from './store'\n\n// import telemetry from './data/telemetry'\n\n// $: console.log($telemetry)\nconst requestFromAPI = connect(requestNewNumbersFromAPI);\n\nfunction updateQueryString(value) {\n    if (history.pushState) {\n        const newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + `?${$queryString}`;\n        window.history.pushState({path:newurl},'', newurl);\n    }\n}\n\n$: updateQueryString($queryString);\n\n</script>\n\n<style>\nmain {\n    width: 700px;\n    margin: auto;\n}\n\nh1 {\n    text-transform: uppercase;\n}\n\ndiv {\n    margin-top:30px;\n    margin-bottom:30px;\n}\n</style>\n\n<main>\n    <h1>Using Immer to make a global store</h1>\n\n    <p>\n        This repository uses Immer to produce new states in one single global $STORE object.\n        Atomic updates to $STORE are handled through a produce function.\n    </p>\n\n    <p>\n        Try playing with these selectors. Take a look at the query string in the\n        URL. Read the source on <a href='https://github.com/hamilton/svelte-immer-example'>Github</a>.\n    </p>\n    <div>\n        <Selector label={\"os\"} current={$STORE.os} onChange={(os) => dispatch(changeOS(os))} options={options.os}  />\n        <!-- lets check that other parts of the store don't constantly fire off if the $STORE updates -->\n        <Selector label={\"channel\"} current={$STORE.channel} onChange={(channel) =>\n        dispatch(changeChannel(channel))} options={options.channel}  />\n    </div>\n    <div style=\"min-height:100px;\">\n        <button on:click={requestFromAPI}>Random set of 10</button>\n        {#if $STORE.isWaiting}\n            <div in:fly={{y:-20, duration: 300}}>fetching from \"server\" (haha jk\n            it's fake)</div>\n        {/if}\n    </div>\n    <RandomNumberList />\n</main>",
    "<script>\nexport let label;\nexport let options;\nexport let current;\nexport let onChange;\n\n</script>\n\n<style>\nselect {\n    background-color: transparent;\n    color: white;\n    border: 1px solid darkgray;\n    display: block;\n}\n\n.selector {\n    display:grid;\n    grid-template-columns: 100px 150px 100px;\n    grid-column-gap: 20px;\n}\n\n</style>\n\n<div class=selector>\n<div>\n{label}\n</div>\n    <select bind:value={current} on:change={() => onChange(current)}>\n        {#each options as option}\n            <option value={option}>\n                {option}\n            </option>\n        {/each}\n    </select>\n\n    {current}\n\n</div>",
    "<script>\nimport { setContext } from 'svelte';\nimport STORE, { connect, addRandomNumber, randomizeNumber, deleteRandomNumber} from './store'\nimport RandomNumber from './RandomNumber.svelte'\n\n// let us set the context for the children. Take a look at how RandomNumber\n// consumes the context here to get the connected actions.\nsetContext('randomizeNumber', connect(randomizeNumber));\nsetContext('deleteRandomNumber', connect(deleteRandomNumber))\n\nconst add = connect(addRandomNumber)\n\n</script>\n\n<style>\n\nul {\n    list-style-type: none;\n    margin:0;\n    padding:0;\n}\n\nbutton {\n    margin-bottom: 20px;\n}\n\n</style>\n\n<button on:click={add}>+ random number</button>\n\n<ul>\n    {#each $STORE.randomNumbers as {id, value}, i (id)}\n        <RandomNumber id={id} value={value} />\n    {/each}\n</ul>",
    "<script>\nimport { format } from 'd3-format';\nimport { slide } from 'svelte/transition';\nimport  { tweened } from 'svelte/motion';\nimport { cubicOut } from 'svelte/easing';\nimport { getContext } from 'svelte'\nimport STORE from './store';\nexport let id;\nexport let value;\n\n// this component will either look at the passed-in props for onRandomize\n// and onDelete, or it will look at the context, or it will be undefined.\nexport let onRandomize = getContext('randomizeNumber');\nexport let onDelete = getContext('deleteRandomNumber');\n\nconst randomizeNumber = () => onRandomize(id)\nconst deleteNumber = () => onDelete(id)\n\n// create a tween which gracefully spins between previous and next values.\nconst tweenedNumber = tweened(0, {duration: 500, easing: cubicOut});\n$: tweenedNumber.set(value)\n\nconst fm = format(',.2')\n\n</script>\n\n<style>\n\n\n.list-container {\n    display: grid;\n    grid-template-columns: 50px 200px 100px 100px;\n    grid-column-gap: 20px;\n}\n\n.list-container div:first-child {\n    text-align: right;\n}\n\n</style>\n\n<li transition:slide={{duration:200}}>\n    <div class=list-container>\n        <div>{fm($tweenedNumber)}</div>\n        <div>\n            <svg width=\"100\" height=\"20\">\n                <rect x=0 y=0 height=20 width={$tweenedNumber} fill=\"rgba(255,255,255,.4)\" />\n            </svg>\n        </div>\n        <div>\n            <button on:click={randomizeNumber}>randomize</button>\n        </div>\n        <div>\n            <button on:click={deleteNumber}>delete</button>\n        </div>\n    </div>\n</li>"
  ],
  "names": [],
  "mappings": "AAuBA,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,cAAc,CAAE,SAAS,AAC7B,CAAC,AAED,GAAG,eAAC,CAAC,AACD,WAAW,IAAI,CACf,cAAc,IAAI,AACtB,CAAC;AC1BD,MAAM,cAAC,CAAC,AACJ,gBAAgB,CAAE,WAAW,CAC7B,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,QAAQ,CAC1B,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,SAAS,cAAC,CAAC,AACP,QAAQ,IAAI,CACZ,qBAAqB,CAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CACxC,eAAe,CAAE,IAAI,AACzB,CAAC;ACJD,EAAE,eAAC,CAAC,AACA,eAAe,CAAE,IAAI,CACrB,OAAO,CAAC,CACR,QAAQ,CAAC,AACb,CAAC,AAED,MAAM,eAAC,CAAC,AACJ,aAAa,CAAE,IAAI,AACvB,CAAC;ACKD,eAAe,eAAC,CAAC,AACb,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAC7C,eAAe,CAAE,IAAI,AACzB,CAAC,AAED,8BAAe,CAAC,kBAAG,YAAY,AAAC,CAAC,AAC7B,UAAU,CAAE,KAAK,AACrB,CAAC"
}