{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/RandomNumberList.svelte",
    "../src/RandomNumber.svelte"
  ],
  "sourcesContent": [
    "<script>\n\nimport Selector from './Selector.svelte'\nimport RandomNumberList from './RandomNumberList.svelte'\nimport STORE, {dispatch, options, changeOS, changeChannel, queryString } from './store'\n\n// import telemetry from './data/telemetry'\n\n// $: console.log($telemetry)\n\nfunction updateQueryString(value) {\n    if (history.pushState) {\n        const newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + `?${$queryString}`;\n        window.history.pushState({path:newurl},'', newurl);\n    }\n}\n\n$: updateQueryString($queryString);\n\n</script>\n\n<style>\nmain {\n    width: 700px;\n    margin: auto;\n}\n\nh1 {\n    text-transform: uppercase;\n}\n</style>\n\n<main>\n    <h1>Using Immer to make a global store</h1>\n\n    <p>\n        This repository uses Immer to produce new states in one single global $STORE object.\n        Atomic updates to $STORE are handled through a produce function.\n    </p>\n\n    <p>\n        Try playing with these selectors. Take a look at the query string in the\n        URL. Read the source on Github.\n    </p>\n\n    <Selector label={\"os\"} current={$STORE.os} onChange={(os) => dispatch(changeOS(os))} options={options.os}  />\n    <!-- lets check that other parts of the store don't constantly fire off if the $STORE updates -->\n    <Selector label={\"channel\"} current={$STORE.channel} onChange={(channel) => dispatch(changeChannel(channel))} options={options.channel}  />\n    <RandomNumberList />\n</main>",
    "<script>\nimport { setContext } from 'svelte';\nimport STORE, { connect, addRandomNumber, randomizeNumber, deleteRandomNumber} from './store'\nimport RandomNumber from './RandomNumber.svelte'\n\n// let us set the context for the children. Take a look at how RandomNumber\n// consumes the context here to get the connected actions.\nsetContext('randomizeNumber', connect(randomizeNumber));\nsetContext('deleteRandomNumber', connect(deleteRandomNumber))\n\nconst add = connect(addRandomNumber)\n\n</script>\n\n<style>\n\nul {\n    list-style-type: none;\n    margin:0;\n    padding:0;\n}\n\n</style>\n\n<button on:click={add}>+ random number</button>\n\n<ul>\n    {#each $STORE.randomNumbers as {id, value}, i (id)}\n        <RandomNumber id={id} value={value} />\n    {/each}\n</ul>",
    "<script>\nimport { format } from 'd3-format';\nimport { slide } from 'svelte/transition';\nimport  { tweened } from 'svelte/motion';\nimport { cubicOut } from 'svelte/easing';\nimport { getContext } from 'svelte'\nimport STORE from './store';\nexport let id;\nexport let value;\n\n// this component will either look at the passed-in props for onRandomize\n// and onDelete, or it will look at the context, or it will be undefined.\nexport let onRandomize = getContext('randomizeNumber');\nexport let onDelete = getContext('deleteRandomNumber');\n\nconst randomizeNumber = () => onRandomize(id)\nconst deleteNumber = () => onDelete(id)\n\n// create a tween which gracefully spins between previous and next values.\nconst tweenedNumber = tweened(0, {duration: 500, easing: cubicOut});\n$: tweenedNumber.set(value)\n\nconst fm = format(',.2')\n\n</script>\n\n<style>\n\n\n.list-container {\n    display: grid;\n    grid-template-columns: 50px 200px 100px 100px;\n    grid-column-gap: 20px;\n}\n\n.list-container div:first-child {\n    text-align: right;\n}\n\n</style>\n\n<li transition:slide={{duration:200}}>\n    <div class=list-container>\n        <div>{fm($tweenedNumber)}</div>\n        <div>\n            <svg width=\"100\" height=\"20\">\n                <rect x=0 y=0 height=20 width={$tweenedNumber} fill=lightgray />\n            </svg>\n        </div>\n        <div>\n            <button on:click={randomizeNumber}>randomize</button>\n        </div>\n        <div>\n            <button on:click={deleteNumber}>delete</button>\n        </div>\n    </div>\n</li>"
  ],
  "names": [],
  "mappings": "AAsBA,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,cAAc,CAAE,SAAS,AAC7B,CAAC;ACbD,EAAE,cAAC,CAAC,AACA,eAAe,CAAE,IAAI,CACrB,OAAO,CAAC,CACR,QAAQ,CAAC,AACb,CAAC;ACSD,eAAe,eAAC,CAAC,AACb,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAC7C,eAAe,CAAE,IAAI,AACzB,CAAC,AAED,8BAAe,CAAC,kBAAG,YAAY,AAAC,CAAC,AAC7B,UAAU,CAAE,KAAK,AACrB,CAAC"
}